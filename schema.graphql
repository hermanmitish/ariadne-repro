type AffectedRowsOutput {
  count: Int!
}

type AggregateTest1 {
  _count: Test1CountAggregate
  _max: Test1MaxAggregate
  _min: Test1MinAggregate
}

type AggregateTest2 {
  _count: Test2CountAggregate
  _max: Test2MaxAggregate
  _min: Test2MinAggregate
}

type AggregateTest3 {
  _count: Test3CountAggregate
  _max: Test3MaxAggregate
  _min: Test3MinAggregate
}

type AggregateTest4 {
  _count: Test4CountAggregate
  _max: Test4MaxAggregate
  _min: Test4MinAggregate
}

type AggregateTest5 {
  _count: Test5CountAggregate
  _max: Test5MaxAggregate
  _min: Test5MinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type Mutation {
  createManyTest1(data: [Test1CreateManyInput!]!): AffectedRowsOutput!
  createManyTest2(data: [Test2CreateManyInput!]!): AffectedRowsOutput!
  createManyTest3(data: [Test3CreateManyInput!]!): AffectedRowsOutput!
  createManyTest4(data: [Test4CreateManyInput!]!): AffectedRowsOutput!
  createManyTest5(data: [Test5CreateManyInput!]!): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!): AffectedRowsOutput!
  createOneTest1(data: Test1CreateInput!): Test1!
  createOneTest2(data: Test2CreateInput!): Test2!
  createOneTest3(data: Test3CreateInput!): Test3!
  createOneTest4(data: Test4CreateInput!): Test4!
  createOneTest5(data: Test5CreateInput!): Test5!
  createOneUser(data: UserCreateInput): User!
  deleteManyTest1(where: Test1WhereInput): AffectedRowsOutput!
  deleteManyTest2(where: Test2WhereInput): AffectedRowsOutput!
  deleteManyTest3(where: Test3WhereInput): AffectedRowsOutput!
  deleteManyTest4(where: Test4WhereInput): AffectedRowsOutput!
  deleteManyTest5(where: Test5WhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneTest1(where: Test1WhereUniqueInput!): Test1
  deleteOneTest2(where: Test2WhereUniqueInput!): Test2
  deleteOneTest3(where: Test3WhereUniqueInput!): Test3
  deleteOneTest4(where: Test4WhereUniqueInput!): Test4
  deleteOneTest5(where: Test5WhereUniqueInput!): Test5
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyTest1(data: Test1UpdateManyMutationInput!, where: Test1WhereInput): AffectedRowsOutput!
  updateManyTest2(data: Test2UpdateManyMutationInput!, where: Test2WhereInput): AffectedRowsOutput!
  updateManyTest3(data: Test3UpdateManyMutationInput!, where: Test3WhereInput): AffectedRowsOutput!
  updateManyTest4(data: Test4UpdateManyMutationInput!, where: Test4WhereInput): AffectedRowsOutput!
  updateManyTest5(data: Test5UpdateManyMutationInput!, where: Test5WhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneTest1(data: Test1UpdateInput!, where: Test1WhereUniqueInput!): Test1
  updateOneTest2(data: Test2UpdateInput!, where: Test2WhereUniqueInput!): Test2
  updateOneTest3(data: Test3UpdateInput!, where: Test3WhereUniqueInput!): Test3
  updateOneTest4(data: Test4UpdateInput!, where: Test4WhereUniqueInput!): Test4
  updateOneTest5(data: Test5UpdateInput!, where: Test5WhereUniqueInput!): Test5
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneTest1(create: Test1CreateInput!, update: Test1UpdateInput!, where: Test1WhereUniqueInput!): Test1!
  upsertOneTest2(create: Test2CreateInput!, update: Test2UpdateInput!, where: Test2WhereUniqueInput!): Test2!
  upsertOneTest3(create: Test3CreateInput!, update: Test3UpdateInput!, where: Test3WhereUniqueInput!): Test3!
  upsertOneTest4(create: Test4CreateInput!, update: Test4UpdateInput!, where: Test4WhereUniqueInput!): Test4!
  upsertOneTest5(create: Test5CreateInput!, update: Test5UpdateInput!, where: Test5WhereUniqueInput!): Test5!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
  unset: Boolean
}

type Query {
  aggregateTest1(cursor: Test1WhereUniqueInput, orderBy: [Test1OrderByWithRelationInput!], skip: Int, take: Int, where: Test1WhereInput): AggregateTest1!
  aggregateTest2(cursor: Test2WhereUniqueInput, orderBy: [Test2OrderByWithRelationInput!], skip: Int, take: Int, where: Test2WhereInput): AggregateTest2!
  aggregateTest3(cursor: Test3WhereUniqueInput, orderBy: [Test3OrderByWithRelationInput!], skip: Int, take: Int, where: Test3WhereInput): AggregateTest3!
  aggregateTest4(cursor: Test4WhereUniqueInput, orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): AggregateTest4!
  aggregateTest5(cursor: Test5WhereUniqueInput, orderBy: [Test5OrderByWithRelationInput!], skip: Int, take: Int, where: Test5WhereInput): AggregateTest5!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstTest1(cursor: Test1WhereUniqueInput, distinct: [Test1ScalarFieldEnum!], orderBy: [Test1OrderByWithRelationInput!], skip: Int, take: Int, where: Test1WhereInput): Test1
  findFirstTest1OrThrow(cursor: Test1WhereUniqueInput, distinct: [Test1ScalarFieldEnum!], orderBy: [Test1OrderByWithRelationInput!], skip: Int, take: Int, where: Test1WhereInput): Test1
  findFirstTest2(cursor: Test2WhereUniqueInput, distinct: [Test2ScalarFieldEnum!], orderBy: [Test2OrderByWithRelationInput!], skip: Int, take: Int, where: Test2WhereInput): Test2
  findFirstTest2OrThrow(cursor: Test2WhereUniqueInput, distinct: [Test2ScalarFieldEnum!], orderBy: [Test2OrderByWithRelationInput!], skip: Int, take: Int, where: Test2WhereInput): Test2
  findFirstTest3(cursor: Test3WhereUniqueInput, distinct: [Test3ScalarFieldEnum!], orderBy: [Test3OrderByWithRelationInput!], skip: Int, take: Int, where: Test3WhereInput): Test3
  findFirstTest3OrThrow(cursor: Test3WhereUniqueInput, distinct: [Test3ScalarFieldEnum!], orderBy: [Test3OrderByWithRelationInput!], skip: Int, take: Int, where: Test3WhereInput): Test3
  findFirstTest4(cursor: Test4WhereUniqueInput, distinct: [Test4ScalarFieldEnum!], orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): Test4
  findFirstTest4OrThrow(cursor: Test4WhereUniqueInput, distinct: [Test4ScalarFieldEnum!], orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): Test4
  findFirstTest5(cursor: Test5WhereUniqueInput, distinct: [Test5ScalarFieldEnum!], orderBy: [Test5OrderByWithRelationInput!], skip: Int, take: Int, where: Test5WhereInput): Test5
  findFirstTest5OrThrow(cursor: Test5WhereUniqueInput, distinct: [Test5ScalarFieldEnum!], orderBy: [Test5OrderByWithRelationInput!], skip: Int, take: Int, where: Test5WhereInput): Test5
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getTest1(where: Test1WhereUniqueInput!): Test1
  getTest2(where: Test2WhereUniqueInput!): Test2
  getTest3(where: Test3WhereUniqueInput!): Test3
  getTest4(where: Test4WhereUniqueInput!): Test4
  getTest5(where: Test5WhereUniqueInput!): Test5
  getUser(where: UserWhereUniqueInput!): User
  groupByTest1(by: [Test1ScalarFieldEnum!]!, having: Test1ScalarWhereWithAggregatesInput, orderBy: [Test1OrderByWithAggregationInput!], skip: Int, take: Int, where: Test1WhereInput): [Test1GroupBy!]!
  groupByTest2(by: [Test2ScalarFieldEnum!]!, having: Test2ScalarWhereWithAggregatesInput, orderBy: [Test2OrderByWithAggregationInput!], skip: Int, take: Int, where: Test2WhereInput): [Test2GroupBy!]!
  groupByTest3(by: [Test3ScalarFieldEnum!]!, having: Test3ScalarWhereWithAggregatesInput, orderBy: [Test3OrderByWithAggregationInput!], skip: Int, take: Int, where: Test3WhereInput): [Test3GroupBy!]!
  groupByTest4(by: [Test4ScalarFieldEnum!]!, having: Test4ScalarWhereWithAggregatesInput, orderBy: [Test4OrderByWithAggregationInput!], skip: Int, take: Int, where: Test4WhereInput): [Test4GroupBy!]!
  groupByTest5(by: [Test5ScalarFieldEnum!]!, having: Test5ScalarWhereWithAggregatesInput, orderBy: [Test5OrderByWithAggregationInput!], skip: Int, take: Int, where: Test5WhereInput): [Test5GroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  test1(where: Test1WhereUniqueInput!): Test1
  test1s(cursor: Test1WhereUniqueInput, distinct: [Test1ScalarFieldEnum!], orderBy: [Test1OrderByWithRelationInput!], skip: Int, take: Int, where: Test1WhereInput): [Test1!]!
  test2(where: Test2WhereUniqueInput!): Test2
  test2s(cursor: Test2WhereUniqueInput, distinct: [Test2ScalarFieldEnum!], orderBy: [Test2OrderByWithRelationInput!], skip: Int, take: Int, where: Test2WhereInput): [Test2!]!
  test3(where: Test3WhereUniqueInput!): Test3
  test3s(cursor: Test3WhereUniqueInput, distinct: [Test3ScalarFieldEnum!], orderBy: [Test3OrderByWithRelationInput!], skip: Int, take: Int, where: Test3WhereInput): [Test3!]!
  test4(where: Test4WhereUniqueInput!): Test4
  test4s(cursor: Test4WhereUniqueInput, distinct: [Test4ScalarFieldEnum!], orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): [Test4!]!
  test5(where: Test5WhereUniqueInput!): Test5
  test5s(cursor: Test5WhereUniqueInput, distinct: [Test5ScalarFieldEnum!], orderBy: [Test5OrderByWithRelationInput!], skip: Int, take: Int, where: Test5WhereInput): [Test5!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Test1 {
  _count: Test1Count
  createdBy(where: UserWhereInput): User
  createdById: String
  id: String!
  name: String!
  test4(cursor: Test4WhereUniqueInput, distinct: [Test4ScalarFieldEnum!], orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): [Test4!]!
}

type Test1Count {
  test4(where: Test4WhereInput): Int!
}

type Test1CountAggregate {
  _all: Int!
  createdById: Int!
  id: Int!
  name: Int!
}

input Test1CountOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test1CreateInput {
  createdBy: UserCreateNestedOneWithoutTest1Input
  id: String
  name: String!
  test4: Test4CreateNestedManyWithoutTest1Input
}

input Test1CreateManyCreatedByInput {
  id: String
  name: String!
}

input Test1CreateManyCreatedByInputEnvelope {
  data: [Test1CreateManyCreatedByInput!]!
}

input Test1CreateManyInput {
  createdById: String
  id: String
  name: String!
}

input Test1CreateNestedManyWithoutCreatedByInput {
  connect: [Test1WhereUniqueInput!]
  connectOrCreate: [Test1CreateOrConnectWithoutCreatedByInput!]
  create: [Test1CreateWithoutCreatedByInput!]
  createMany: Test1CreateManyCreatedByInputEnvelope
}

input Test1CreateNestedOneWithoutTest4Input {
  connect: Test1WhereUniqueInput
  connectOrCreate: Test1CreateOrConnectWithoutTest4Input
  create: Test1CreateWithoutTest4Input
}

input Test1CreateOrConnectWithoutCreatedByInput {
  create: Test1CreateWithoutCreatedByInput!
  where: Test1WhereUniqueInput!
}

input Test1CreateOrConnectWithoutTest4Input {
  create: Test1CreateWithoutTest4Input!
  where: Test1WhereUniqueInput!
}

input Test1CreateWithoutCreatedByInput {
  id: String
  name: String!
  test4: Test4CreateNestedManyWithoutTest1Input
}

input Test1CreateWithoutTest4Input {
  createdBy: UserCreateNestedOneWithoutTest1Input
  id: String
  name: String!
}

type Test1GroupBy {
  _count: Test1CountAggregate
  _max: Test1MaxAggregate
  _min: Test1MinAggregate
  createdById: String
  id: String!
  name: String!
}

input Test1ListRelationFilter {
  every: Test1WhereInput
  none: Test1WhereInput
  some: Test1WhereInput
}

type Test1MaxAggregate {
  createdById: String
  id: String
  name: String
}

input Test1MaxOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

type Test1MinAggregate {
  createdById: String
  id: String
  name: String
}

input Test1MinOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test1NullableRelationFilter {
  is: Test1WhereInput
  isNot: Test1WhereInput
}

input Test1OrderByRelationAggregateInput {
  _count: SortOrder
}

input Test1OrderByWithAggregationInput {
  _count: Test1CountOrderByAggregateInput
  _max: Test1MaxOrderByAggregateInput
  _min: Test1MinOrderByAggregateInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test1OrderByWithRelationInput {
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test4: Test4OrderByRelationAggregateInput
}

enum Test1ScalarFieldEnum {
  createdById
  id
  name
}

input Test1ScalarWhereInput {
  AND: [Test1ScalarWhereInput!]
  NOT: [Test1ScalarWhereInput!]
  OR: [Test1ScalarWhereInput!]
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
}

input Test1ScalarWhereWithAggregatesInput {
  AND: [Test1ScalarWhereWithAggregatesInput!]
  NOT: [Test1ScalarWhereWithAggregatesInput!]
  OR: [Test1ScalarWhereWithAggregatesInput!]
  createdById: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input Test1UpdateInput {
  createdBy: UserUpdateOneWithoutTest1NestedInput
  name: StringFieldUpdateOperationsInput
  test4: Test4UpdateManyWithoutTest1NestedInput
}

input Test1UpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input Test1UpdateManyWithWhereWithoutCreatedByInput {
  data: Test1UpdateManyMutationInput!
  where: Test1ScalarWhereInput!
}

input Test1UpdateManyWithoutCreatedByNestedInput {
  connect: [Test1WhereUniqueInput!]
  connectOrCreate: [Test1CreateOrConnectWithoutCreatedByInput!]
  create: [Test1CreateWithoutCreatedByInput!]
  createMany: Test1CreateManyCreatedByInputEnvelope
  delete: [Test1WhereUniqueInput!]
  deleteMany: [Test1ScalarWhereInput!]
  disconnect: [Test1WhereUniqueInput!]
  set: [Test1WhereUniqueInput!]
  update: [Test1UpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [Test1UpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [Test1UpsertWithWhereUniqueWithoutCreatedByInput!]
}

input Test1UpdateOneWithoutTest4NestedInput {
  connect: Test1WhereUniqueInput
  connectOrCreate: Test1CreateOrConnectWithoutTest4Input
  create: Test1CreateWithoutTest4Input
  delete: Test1WhereInput
  disconnect: Boolean
  update: Test1UpdateToOneWithWhereWithoutTest4Input
  upsert: Test1UpsertWithoutTest4Input
}

input Test1UpdateToOneWithWhereWithoutTest4Input {
  data: Test1UpdateWithoutTest4Input!
  where: Test1WhereInput
}

input Test1UpdateWithWhereUniqueWithoutCreatedByInput {
  data: Test1UpdateWithoutCreatedByInput!
  where: Test1WhereUniqueInput!
}

input Test1UpdateWithoutCreatedByInput {
  name: StringFieldUpdateOperationsInput
  test4: Test4UpdateManyWithoutTest1NestedInput
}

input Test1UpdateWithoutTest4Input {
  createdBy: UserUpdateOneWithoutTest1NestedInput
  name: StringFieldUpdateOperationsInput
}

input Test1UpsertWithWhereUniqueWithoutCreatedByInput {
  create: Test1CreateWithoutCreatedByInput!
  update: Test1UpdateWithoutCreatedByInput!
  where: Test1WhereUniqueInput!
}

input Test1UpsertWithoutTest4Input {
  create: Test1CreateWithoutTest4Input!
  update: Test1UpdateWithoutTest4Input!
  where: Test1WhereInput
}

input Test1WhereInput {
  AND: [Test1WhereInput!]
  NOT: [Test1WhereInput!]
  OR: [Test1WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
  test4: Test4ListRelationFilter
}

input Test1WhereUniqueInput {
  AND: [Test1WhereInput!]
  NOT: [Test1WhereInput!]
  OR: [Test1WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: String
  name: StringFilter
  test4: Test4ListRelationFilter
}

type Test2 {
  _count: Test2Count
  createdBy(where: UserWhereInput): User
  createdById: String
  id: String!
  name: String!
  test3(cursor: Test3WhereUniqueInput, distinct: [Test3ScalarFieldEnum!], orderBy: [Test3OrderByWithRelationInput!], skip: Int, take: Int, where: Test3WhereInput): [Test3!]!
  test4(cursor: Test4WhereUniqueInput, distinct: [Test4ScalarFieldEnum!], orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): [Test4!]!
}

type Test2Count {
  test3(where: Test3WhereInput): Int!
  test4(where: Test4WhereInput): Int!
}

type Test2CountAggregate {
  _all: Int!
  createdById: Int!
  id: Int!
  name: Int!
}

input Test2CountOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test2CreateInput {
  createdBy: UserCreateNestedOneWithoutTest2Input
  id: String
  name: String!
  test3: Test3CreateNestedManyWithoutTest2Input
  test4: Test4CreateNestedManyWithoutTest2Input
}

input Test2CreateManyCreatedByInput {
  id: String
  name: String!
}

input Test2CreateManyCreatedByInputEnvelope {
  data: [Test2CreateManyCreatedByInput!]!
}

input Test2CreateManyInput {
  createdById: String
  id: String
  name: String!
}

input Test2CreateNestedManyWithoutCreatedByInput {
  connect: [Test2WhereUniqueInput!]
  connectOrCreate: [Test2CreateOrConnectWithoutCreatedByInput!]
  create: [Test2CreateWithoutCreatedByInput!]
  createMany: Test2CreateManyCreatedByInputEnvelope
}

input Test2CreateNestedOneWithoutTest3Input {
  connect: Test2WhereUniqueInput
  connectOrCreate: Test2CreateOrConnectWithoutTest3Input
  create: Test2CreateWithoutTest3Input
}

input Test2CreateNestedOneWithoutTest4Input {
  connect: Test2WhereUniqueInput
  connectOrCreate: Test2CreateOrConnectWithoutTest4Input
  create: Test2CreateWithoutTest4Input
}

input Test2CreateOrConnectWithoutCreatedByInput {
  create: Test2CreateWithoutCreatedByInput!
  where: Test2WhereUniqueInput!
}

input Test2CreateOrConnectWithoutTest3Input {
  create: Test2CreateWithoutTest3Input!
  where: Test2WhereUniqueInput!
}

input Test2CreateOrConnectWithoutTest4Input {
  create: Test2CreateWithoutTest4Input!
  where: Test2WhereUniqueInput!
}

input Test2CreateWithoutCreatedByInput {
  id: String
  name: String!
  test3: Test3CreateNestedManyWithoutTest2Input
  test4: Test4CreateNestedManyWithoutTest2Input
}

input Test2CreateWithoutTest3Input {
  createdBy: UserCreateNestedOneWithoutTest2Input
  id: String
  name: String!
  test4: Test4CreateNestedManyWithoutTest2Input
}

input Test2CreateWithoutTest4Input {
  createdBy: UserCreateNestedOneWithoutTest2Input
  id: String
  name: String!
  test3: Test3CreateNestedManyWithoutTest2Input
}

type Test2GroupBy {
  _count: Test2CountAggregate
  _max: Test2MaxAggregate
  _min: Test2MinAggregate
  createdById: String
  id: String!
  name: String!
}

input Test2ListRelationFilter {
  every: Test2WhereInput
  none: Test2WhereInput
  some: Test2WhereInput
}

type Test2MaxAggregate {
  createdById: String
  id: String
  name: String
}

input Test2MaxOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

type Test2MinAggregate {
  createdById: String
  id: String
  name: String
}

input Test2MinOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test2NullableRelationFilter {
  is: Test2WhereInput
  isNot: Test2WhereInput
}

input Test2OrderByRelationAggregateInput {
  _count: SortOrder
}

input Test2OrderByWithAggregationInput {
  _count: Test2CountOrderByAggregateInput
  _max: Test2MaxOrderByAggregateInput
  _min: Test2MinOrderByAggregateInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test2OrderByWithRelationInput {
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test3: Test3OrderByRelationAggregateInput
  test4: Test4OrderByRelationAggregateInput
}

input Test2RelationFilter {
  is: Test2WhereInput
  isNot: Test2WhereInput
}

enum Test2ScalarFieldEnum {
  createdById
  id
  name
}

input Test2ScalarWhereInput {
  AND: [Test2ScalarWhereInput!]
  NOT: [Test2ScalarWhereInput!]
  OR: [Test2ScalarWhereInput!]
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
}

input Test2ScalarWhereWithAggregatesInput {
  AND: [Test2ScalarWhereWithAggregatesInput!]
  NOT: [Test2ScalarWhereWithAggregatesInput!]
  OR: [Test2ScalarWhereWithAggregatesInput!]
  createdById: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input Test2UpdateInput {
  createdBy: UserUpdateOneWithoutTest2NestedInput
  name: StringFieldUpdateOperationsInput
  test3: Test3UpdateManyWithoutTest2NestedInput
  test4: Test4UpdateManyWithoutTest2NestedInput
}

input Test2UpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input Test2UpdateManyWithWhereWithoutCreatedByInput {
  data: Test2UpdateManyMutationInput!
  where: Test2ScalarWhereInput!
}

input Test2UpdateManyWithoutCreatedByNestedInput {
  connect: [Test2WhereUniqueInput!]
  connectOrCreate: [Test2CreateOrConnectWithoutCreatedByInput!]
  create: [Test2CreateWithoutCreatedByInput!]
  createMany: Test2CreateManyCreatedByInputEnvelope
  delete: [Test2WhereUniqueInput!]
  deleteMany: [Test2ScalarWhereInput!]
  disconnect: [Test2WhereUniqueInput!]
  set: [Test2WhereUniqueInput!]
  update: [Test2UpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [Test2UpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [Test2UpsertWithWhereUniqueWithoutCreatedByInput!]
}

input Test2UpdateOneRequiredWithoutTest3NestedInput {
  connect: Test2WhereUniqueInput
  connectOrCreate: Test2CreateOrConnectWithoutTest3Input
  create: Test2CreateWithoutTest3Input
  update: Test2UpdateToOneWithWhereWithoutTest3Input
  upsert: Test2UpsertWithoutTest3Input
}

input Test2UpdateOneWithoutTest4NestedInput {
  connect: Test2WhereUniqueInput
  connectOrCreate: Test2CreateOrConnectWithoutTest4Input
  create: Test2CreateWithoutTest4Input
  delete: Test2WhereInput
  disconnect: Boolean
  update: Test2UpdateToOneWithWhereWithoutTest4Input
  upsert: Test2UpsertWithoutTest4Input
}

input Test2UpdateToOneWithWhereWithoutTest3Input {
  data: Test2UpdateWithoutTest3Input!
  where: Test2WhereInput
}

input Test2UpdateToOneWithWhereWithoutTest4Input {
  data: Test2UpdateWithoutTest4Input!
  where: Test2WhereInput
}

input Test2UpdateWithWhereUniqueWithoutCreatedByInput {
  data: Test2UpdateWithoutCreatedByInput!
  where: Test2WhereUniqueInput!
}

input Test2UpdateWithoutCreatedByInput {
  name: StringFieldUpdateOperationsInput
  test3: Test3UpdateManyWithoutTest2NestedInput
  test4: Test4UpdateManyWithoutTest2NestedInput
}

input Test2UpdateWithoutTest3Input {
  createdBy: UserUpdateOneWithoutTest2NestedInput
  name: StringFieldUpdateOperationsInput
  test4: Test4UpdateManyWithoutTest2NestedInput
}

input Test2UpdateWithoutTest4Input {
  createdBy: UserUpdateOneWithoutTest2NestedInput
  name: StringFieldUpdateOperationsInput
  test3: Test3UpdateManyWithoutTest2NestedInput
}

input Test2UpsertWithWhereUniqueWithoutCreatedByInput {
  create: Test2CreateWithoutCreatedByInput!
  update: Test2UpdateWithoutCreatedByInput!
  where: Test2WhereUniqueInput!
}

input Test2UpsertWithoutTest3Input {
  create: Test2CreateWithoutTest3Input!
  update: Test2UpdateWithoutTest3Input!
  where: Test2WhereInput
}

input Test2UpsertWithoutTest4Input {
  create: Test2CreateWithoutTest4Input!
  update: Test2UpdateWithoutTest4Input!
  where: Test2WhereInput
}

input Test2WhereInput {
  AND: [Test2WhereInput!]
  NOT: [Test2WhereInput!]
  OR: [Test2WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
  test3: Test3ListRelationFilter
  test4: Test4ListRelationFilter
}

input Test2WhereUniqueInput {
  AND: [Test2WhereInput!]
  NOT: [Test2WhereInput!]
  OR: [Test2WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: String
  name: String
  test3: Test3ListRelationFilter
  test4: Test4ListRelationFilter
}

type Test3 {
  _count: Test3Count
  createdBy(where: UserWhereInput): User
  createdById: String
  id: String!
  name: String!
  test2: Test2!
  test2Id: String!
  test4(cursor: Test4WhereUniqueInput, distinct: [Test4ScalarFieldEnum!], orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): [Test4!]!
  test5: Test5!
  test5Id: String!
}

type Test3Count {
  test4(where: Test4WhereInput): Int!
}

type Test3CountAggregate {
  _all: Int!
  createdById: Int!
  id: Int!
  name: Int!
  test2Id: Int!
  test5Id: Int!
}

input Test3CountOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test2Id: SortOrder
  test5Id: SortOrder
}

input Test3CreateInput {
  createdBy: UserCreateNestedOneWithoutTest3Input
  id: String
  name: String!
  test2: Test2CreateNestedOneWithoutTest3Input!
  test4: Test4CreateNestedManyWithoutTest3Input
  test5: Test5CreateNestedOneWithoutTest3Input!
}

input Test3CreateManyCreatedByInput {
  id: String
  name: String!
  test2Id: String!
  test5Id: String!
}

input Test3CreateManyCreatedByInputEnvelope {
  data: [Test3CreateManyCreatedByInput!]!
}

input Test3CreateManyInput {
  createdById: String
  id: String
  name: String!
  test2Id: String!
  test5Id: String!
}

input Test3CreateManyTest2Input {
  createdById: String
  id: String
  name: String!
  test5Id: String!
}

input Test3CreateManyTest2InputEnvelope {
  data: [Test3CreateManyTest2Input!]!
}

input Test3CreateManyTest5Input {
  createdById: String
  id: String
  name: String!
  test2Id: String!
}

input Test3CreateManyTest5InputEnvelope {
  data: [Test3CreateManyTest5Input!]!
}

input Test3CreateNestedManyWithoutCreatedByInput {
  connect: [Test3WhereUniqueInput!]
  connectOrCreate: [Test3CreateOrConnectWithoutCreatedByInput!]
  create: [Test3CreateWithoutCreatedByInput!]
  createMany: Test3CreateManyCreatedByInputEnvelope
}

input Test3CreateNestedManyWithoutTest2Input {
  connect: [Test3WhereUniqueInput!]
  connectOrCreate: [Test3CreateOrConnectWithoutTest2Input!]
  create: [Test3CreateWithoutTest2Input!]
  createMany: Test3CreateManyTest2InputEnvelope
}

input Test3CreateNestedManyWithoutTest5Input {
  connect: [Test3WhereUniqueInput!]
  connectOrCreate: [Test3CreateOrConnectWithoutTest5Input!]
  create: [Test3CreateWithoutTest5Input!]
  createMany: Test3CreateManyTest5InputEnvelope
}

input Test3CreateNestedOneWithoutTest4Input {
  connect: Test3WhereUniqueInput
  connectOrCreate: Test3CreateOrConnectWithoutTest4Input
  create: Test3CreateWithoutTest4Input
}

input Test3CreateOrConnectWithoutCreatedByInput {
  create: Test3CreateWithoutCreatedByInput!
  where: Test3WhereUniqueInput!
}

input Test3CreateOrConnectWithoutTest2Input {
  create: Test3CreateWithoutTest2Input!
  where: Test3WhereUniqueInput!
}

input Test3CreateOrConnectWithoutTest4Input {
  create: Test3CreateWithoutTest4Input!
  where: Test3WhereUniqueInput!
}

input Test3CreateOrConnectWithoutTest5Input {
  create: Test3CreateWithoutTest5Input!
  where: Test3WhereUniqueInput!
}

input Test3CreateWithoutCreatedByInput {
  id: String
  name: String!
  test2: Test2CreateNestedOneWithoutTest3Input!
  test4: Test4CreateNestedManyWithoutTest3Input
  test5: Test5CreateNestedOneWithoutTest3Input!
}

input Test3CreateWithoutTest2Input {
  createdBy: UserCreateNestedOneWithoutTest3Input
  id: String
  name: String!
  test4: Test4CreateNestedManyWithoutTest3Input
  test5: Test5CreateNestedOneWithoutTest3Input!
}

input Test3CreateWithoutTest4Input {
  createdBy: UserCreateNestedOneWithoutTest3Input
  id: String
  name: String!
  test2: Test2CreateNestedOneWithoutTest3Input!
  test5: Test5CreateNestedOneWithoutTest3Input!
}

input Test3CreateWithoutTest5Input {
  createdBy: UserCreateNestedOneWithoutTest3Input
  id: String
  name: String!
  test2: Test2CreateNestedOneWithoutTest3Input!
  test4: Test4CreateNestedManyWithoutTest3Input
}

type Test3GroupBy {
  _count: Test3CountAggregate
  _max: Test3MaxAggregate
  _min: Test3MinAggregate
  createdById: String
  id: String!
  name: String!
  test2Id: String!
  test5Id: String!
}

input Test3ListRelationFilter {
  every: Test3WhereInput
  none: Test3WhereInput
  some: Test3WhereInput
}

type Test3MaxAggregate {
  createdById: String
  id: String
  name: String
  test2Id: String
  test5Id: String
}

input Test3MaxOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test2Id: SortOrder
  test5Id: SortOrder
}

type Test3MinAggregate {
  createdById: String
  id: String
  name: String
  test2Id: String
  test5Id: String
}

input Test3MinOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test2Id: SortOrder
  test5Id: SortOrder
}

input Test3OrderByRelationAggregateInput {
  _count: SortOrder
}

input Test3OrderByWithAggregationInput {
  _count: Test3CountOrderByAggregateInput
  _max: Test3MaxOrderByAggregateInput
  _min: Test3MinOrderByAggregateInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test2Id: SortOrder
  test5Id: SortOrder
}

input Test3OrderByWithRelationInput {
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test2: Test2OrderByWithRelationInput
  test2Id: SortOrder
  test4: Test4OrderByRelationAggregateInput
  test5: Test5OrderByWithRelationInput
  test5Id: SortOrder
}

input Test3RelationFilter {
  is: Test3WhereInput
  isNot: Test3WhereInput
}

enum Test3ScalarFieldEnum {
  createdById
  id
  name
  test2Id
  test5Id
}

input Test3ScalarWhereInput {
  AND: [Test3ScalarWhereInput!]
  NOT: [Test3ScalarWhereInput!]
  OR: [Test3ScalarWhereInput!]
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
  test2Id: StringFilter
  test5Id: StringFilter
}

input Test3ScalarWhereWithAggregatesInput {
  AND: [Test3ScalarWhereWithAggregatesInput!]
  NOT: [Test3ScalarWhereWithAggregatesInput!]
  OR: [Test3ScalarWhereWithAggregatesInput!]
  createdById: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  test2Id: StringWithAggregatesFilter
  test5Id: StringWithAggregatesFilter
}

input Test3UpdateInput {
  createdBy: UserUpdateOneWithoutTest3NestedInput
  name: StringFieldUpdateOperationsInput
  test2: Test2UpdateOneRequiredWithoutTest3NestedInput
  test4: Test4UpdateManyWithoutTest3NestedInput
  test5: Test5UpdateOneRequiredWithoutTest3NestedInput
}

input Test3UpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input Test3UpdateManyWithWhereWithoutCreatedByInput {
  data: Test3UpdateManyMutationInput!
  where: Test3ScalarWhereInput!
}

input Test3UpdateManyWithWhereWithoutTest2Input {
  data: Test3UpdateManyMutationInput!
  where: Test3ScalarWhereInput!
}

input Test3UpdateManyWithWhereWithoutTest5Input {
  data: Test3UpdateManyMutationInput!
  where: Test3ScalarWhereInput!
}

input Test3UpdateManyWithoutCreatedByNestedInput {
  connect: [Test3WhereUniqueInput!]
  connectOrCreate: [Test3CreateOrConnectWithoutCreatedByInput!]
  create: [Test3CreateWithoutCreatedByInput!]
  createMany: Test3CreateManyCreatedByInputEnvelope
  delete: [Test3WhereUniqueInput!]
  deleteMany: [Test3ScalarWhereInput!]
  disconnect: [Test3WhereUniqueInput!]
  set: [Test3WhereUniqueInput!]
  update: [Test3UpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [Test3UpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [Test3UpsertWithWhereUniqueWithoutCreatedByInput!]
}

input Test3UpdateManyWithoutTest2NestedInput {
  connect: [Test3WhereUniqueInput!]
  connectOrCreate: [Test3CreateOrConnectWithoutTest2Input!]
  create: [Test3CreateWithoutTest2Input!]
  createMany: Test3CreateManyTest2InputEnvelope
  delete: [Test3WhereUniqueInput!]
  deleteMany: [Test3ScalarWhereInput!]
  disconnect: [Test3WhereUniqueInput!]
  set: [Test3WhereUniqueInput!]
  update: [Test3UpdateWithWhereUniqueWithoutTest2Input!]
  updateMany: [Test3UpdateManyWithWhereWithoutTest2Input!]
  upsert: [Test3UpsertWithWhereUniqueWithoutTest2Input!]
}

input Test3UpdateManyWithoutTest5NestedInput {
  connect: [Test3WhereUniqueInput!]
  connectOrCreate: [Test3CreateOrConnectWithoutTest5Input!]
  create: [Test3CreateWithoutTest5Input!]
  createMany: Test3CreateManyTest5InputEnvelope
  delete: [Test3WhereUniqueInput!]
  deleteMany: [Test3ScalarWhereInput!]
  disconnect: [Test3WhereUniqueInput!]
  set: [Test3WhereUniqueInput!]
  update: [Test3UpdateWithWhereUniqueWithoutTest5Input!]
  updateMany: [Test3UpdateManyWithWhereWithoutTest5Input!]
  upsert: [Test3UpsertWithWhereUniqueWithoutTest5Input!]
}

input Test3UpdateOneRequiredWithoutTest4NestedInput {
  connect: Test3WhereUniqueInput
  connectOrCreate: Test3CreateOrConnectWithoutTest4Input
  create: Test3CreateWithoutTest4Input
  update: Test3UpdateToOneWithWhereWithoutTest4Input
  upsert: Test3UpsertWithoutTest4Input
}

input Test3UpdateToOneWithWhereWithoutTest4Input {
  data: Test3UpdateWithoutTest4Input!
  where: Test3WhereInput
}

input Test3UpdateWithWhereUniqueWithoutCreatedByInput {
  data: Test3UpdateWithoutCreatedByInput!
  where: Test3WhereUniqueInput!
}

input Test3UpdateWithWhereUniqueWithoutTest2Input {
  data: Test3UpdateWithoutTest2Input!
  where: Test3WhereUniqueInput!
}

input Test3UpdateWithWhereUniqueWithoutTest5Input {
  data: Test3UpdateWithoutTest5Input!
  where: Test3WhereUniqueInput!
}

input Test3UpdateWithoutCreatedByInput {
  name: StringFieldUpdateOperationsInput
  test2: Test2UpdateOneRequiredWithoutTest3NestedInput
  test4: Test4UpdateManyWithoutTest3NestedInput
  test5: Test5UpdateOneRequiredWithoutTest3NestedInput
}

input Test3UpdateWithoutTest2Input {
  createdBy: UserUpdateOneWithoutTest3NestedInput
  name: StringFieldUpdateOperationsInput
  test4: Test4UpdateManyWithoutTest3NestedInput
  test5: Test5UpdateOneRequiredWithoutTest3NestedInput
}

input Test3UpdateWithoutTest4Input {
  createdBy: UserUpdateOneWithoutTest3NestedInput
  name: StringFieldUpdateOperationsInput
  test2: Test2UpdateOneRequiredWithoutTest3NestedInput
  test5: Test5UpdateOneRequiredWithoutTest3NestedInput
}

input Test3UpdateWithoutTest5Input {
  createdBy: UserUpdateOneWithoutTest3NestedInput
  name: StringFieldUpdateOperationsInput
  test2: Test2UpdateOneRequiredWithoutTest3NestedInput
  test4: Test4UpdateManyWithoutTest3NestedInput
}

input Test3UpsertWithWhereUniqueWithoutCreatedByInput {
  create: Test3CreateWithoutCreatedByInput!
  update: Test3UpdateWithoutCreatedByInput!
  where: Test3WhereUniqueInput!
}

input Test3UpsertWithWhereUniqueWithoutTest2Input {
  create: Test3CreateWithoutTest2Input!
  update: Test3UpdateWithoutTest2Input!
  where: Test3WhereUniqueInput!
}

input Test3UpsertWithWhereUniqueWithoutTest5Input {
  create: Test3CreateWithoutTest5Input!
  update: Test3UpdateWithoutTest5Input!
  where: Test3WhereUniqueInput!
}

input Test3UpsertWithoutTest4Input {
  create: Test3CreateWithoutTest4Input!
  update: Test3UpdateWithoutTest4Input!
  where: Test3WhereInput
}

input Test3WhereInput {
  AND: [Test3WhereInput!]
  NOT: [Test3WhereInput!]
  OR: [Test3WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
  test2: Test2RelationFilter
  test2Id: StringFilter
  test4: Test4ListRelationFilter
  test5: Test5RelationFilter
  test5Id: StringFilter
}

input Test3WhereUniqueInput {
  AND: [Test3WhereInput!]
  NOT: [Test3WhereInput!]
  OR: [Test3WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: String
  name: StringFilter
  test2: Test2RelationFilter
  test2Id: StringFilter
  test4: Test4ListRelationFilter
  test5: Test5RelationFilter
  test5Id: StringFilter
}

type Test4 {
  createdBy(where: UserWhereInput): User
  createdById: String
  id: String!
  name: String!
  test1(where: Test1WhereInput): Test1
  test1Id: String
  test2(where: Test2WhereInput): Test2
  test2Id: String!
  test3: Test3!
  test3Id: String!
  test5(where: Test5WhereInput): Test5
  test5Id: String
}

type Test4CountAggregate {
  _all: Int!
  createdById: Int!
  id: Int!
  name: Int!
  test1Id: Int!
  test2Id: Int!
  test3Id: Int!
  test5Id: Int!
}

input Test4CountOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test1Id: SortOrder
  test2Id: SortOrder
  test3Id: SortOrder
  test5Id: SortOrder
}

input Test4CreateInput {
  createdBy: UserCreateNestedOneWithoutTest4Input
  id: String
  name: String!
  test1: Test1CreateNestedOneWithoutTest4Input
  test2: Test2CreateNestedOneWithoutTest4Input
  test3: Test3CreateNestedOneWithoutTest4Input!
  test5: Test5CreateNestedOneWithoutTest4Input
}

input Test4CreateManyCreatedByInput {
  id: String
  name: String!
  test1Id: String
  test2Id: String!
  test3Id: String!
  test5Id: String
}

input Test4CreateManyCreatedByInputEnvelope {
  data: [Test4CreateManyCreatedByInput!]!
}

input Test4CreateManyInput {
  createdById: String
  id: String
  name: String!
  test1Id: String
  test2Id: String!
  test3Id: String!
  test5Id: String
}

input Test4CreateManyTest1Input {
  createdById: String
  id: String
  name: String!
  test2Id: String!
  test3Id: String!
  test5Id: String
}

input Test4CreateManyTest1InputEnvelope {
  data: [Test4CreateManyTest1Input!]!
}

input Test4CreateManyTest2Input {
  createdById: String
  id: String
  name: String!
  test1Id: String
  test3Id: String!
  test5Id: String
}

input Test4CreateManyTest2InputEnvelope {
  data: [Test4CreateManyTest2Input!]!
}

input Test4CreateManyTest3Input {
  createdById: String
  id: String
  name: String!
  test1Id: String
  test2Id: String!
  test5Id: String
}

input Test4CreateManyTest3InputEnvelope {
  data: [Test4CreateManyTest3Input!]!
}

input Test4CreateManyTest5Input {
  createdById: String
  id: String
  name: String!
  test1Id: String
  test2Id: String!
  test3Id: String!
}

input Test4CreateManyTest5InputEnvelope {
  data: [Test4CreateManyTest5Input!]!
}

input Test4CreateNestedManyWithoutCreatedByInput {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutCreatedByInput!]
  create: [Test4CreateWithoutCreatedByInput!]
  createMany: Test4CreateManyCreatedByInputEnvelope
}

input Test4CreateNestedManyWithoutTest1Input {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutTest1Input!]
  create: [Test4CreateWithoutTest1Input!]
  createMany: Test4CreateManyTest1InputEnvelope
}

input Test4CreateNestedManyWithoutTest2Input {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutTest2Input!]
  create: [Test4CreateWithoutTest2Input!]
  createMany: Test4CreateManyTest2InputEnvelope
}

input Test4CreateNestedManyWithoutTest3Input {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutTest3Input!]
  create: [Test4CreateWithoutTest3Input!]
  createMany: Test4CreateManyTest3InputEnvelope
}

input Test4CreateNestedManyWithoutTest5Input {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutTest5Input!]
  create: [Test4CreateWithoutTest5Input!]
  createMany: Test4CreateManyTest5InputEnvelope
}

input Test4CreateOrConnectWithoutCreatedByInput {
  create: Test4CreateWithoutCreatedByInput!
  where: Test4WhereUniqueInput!
}

input Test4CreateOrConnectWithoutTest1Input {
  create: Test4CreateWithoutTest1Input!
  where: Test4WhereUniqueInput!
}

input Test4CreateOrConnectWithoutTest2Input {
  create: Test4CreateWithoutTest2Input!
  where: Test4WhereUniqueInput!
}

input Test4CreateOrConnectWithoutTest3Input {
  create: Test4CreateWithoutTest3Input!
  where: Test4WhereUniqueInput!
}

input Test4CreateOrConnectWithoutTest5Input {
  create: Test4CreateWithoutTest5Input!
  where: Test4WhereUniqueInput!
}

input Test4CreateWithoutCreatedByInput {
  id: String
  name: String!
  test1: Test1CreateNestedOneWithoutTest4Input
  test2: Test2CreateNestedOneWithoutTest4Input
  test3: Test3CreateNestedOneWithoutTest4Input!
  test5: Test5CreateNestedOneWithoutTest4Input
}

input Test4CreateWithoutTest1Input {
  createdBy: UserCreateNestedOneWithoutTest4Input
  id: String
  name: String!
  test2: Test2CreateNestedOneWithoutTest4Input
  test3: Test3CreateNestedOneWithoutTest4Input!
  test5: Test5CreateNestedOneWithoutTest4Input
}

input Test4CreateWithoutTest2Input {
  createdBy: UserCreateNestedOneWithoutTest4Input
  id: String
  name: String!
  test1: Test1CreateNestedOneWithoutTest4Input
  test3: Test3CreateNestedOneWithoutTest4Input!
  test5: Test5CreateNestedOneWithoutTest4Input
}

input Test4CreateWithoutTest3Input {
  createdBy: UserCreateNestedOneWithoutTest4Input
  id: String
  name: String!
  test1: Test1CreateNestedOneWithoutTest4Input
  test2: Test2CreateNestedOneWithoutTest4Input
  test5: Test5CreateNestedOneWithoutTest4Input
}

input Test4CreateWithoutTest5Input {
  createdBy: UserCreateNestedOneWithoutTest4Input
  id: String
  name: String!
  test1: Test1CreateNestedOneWithoutTest4Input
  test2: Test2CreateNestedOneWithoutTest4Input
  test3: Test3CreateNestedOneWithoutTest4Input!
}

type Test4GroupBy {
  _count: Test4CountAggregate
  _max: Test4MaxAggregate
  _min: Test4MinAggregate
  createdById: String
  id: String!
  name: String!
  test1Id: String
  test2Id: String!
  test3Id: String!
  test5Id: String
}

input Test4ListRelationFilter {
  every: Test4WhereInput
  none: Test4WhereInput
  some: Test4WhereInput
}

type Test4MaxAggregate {
  createdById: String
  id: String
  name: String
  test1Id: String
  test2Id: String
  test3Id: String
  test5Id: String
}

input Test4MaxOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test1Id: SortOrder
  test2Id: SortOrder
  test3Id: SortOrder
  test5Id: SortOrder
}

type Test4MinAggregate {
  createdById: String
  id: String
  name: String
  test1Id: String
  test2Id: String
  test3Id: String
  test5Id: String
}

input Test4MinOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test1Id: SortOrder
  test2Id: SortOrder
  test3Id: SortOrder
  test5Id: SortOrder
}

input Test4OrderByRelationAggregateInput {
  _count: SortOrder
}

input Test4OrderByWithAggregationInput {
  _count: Test4CountOrderByAggregateInput
  _max: Test4MaxOrderByAggregateInput
  _min: Test4MinOrderByAggregateInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test1Id: SortOrder
  test2Id: SortOrder
  test3Id: SortOrder
  test5Id: SortOrder
}

input Test4OrderByWithRelationInput {
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test1: Test1OrderByWithRelationInput
  test1Id: SortOrder
  test2: Test2OrderByWithRelationInput
  test2Id: SortOrder
  test3: Test3OrderByWithRelationInput
  test3Id: SortOrder
  test5: Test5OrderByWithRelationInput
  test5Id: SortOrder
}

enum Test4ScalarFieldEnum {
  createdById
  id
  name
  test1Id
  test2Id
  test3Id
  test5Id
}

input Test4ScalarWhereInput {
  AND: [Test4ScalarWhereInput!]
  NOT: [Test4ScalarWhereInput!]
  OR: [Test4ScalarWhereInput!]
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
  test1Id: StringNullableFilter
  test2Id: StringFilter
  test3Id: StringFilter
  test5Id: StringNullableFilter
}

input Test4ScalarWhereWithAggregatesInput {
  AND: [Test4ScalarWhereWithAggregatesInput!]
  NOT: [Test4ScalarWhereWithAggregatesInput!]
  OR: [Test4ScalarWhereWithAggregatesInput!]
  createdById: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  test1Id: StringNullableWithAggregatesFilter
  test2Id: StringWithAggregatesFilter
  test3Id: StringWithAggregatesFilter
  test5Id: StringNullableWithAggregatesFilter
}

input Test4UpdateInput {
  createdBy: UserUpdateOneWithoutTest4NestedInput
  name: StringFieldUpdateOperationsInput
  test1: Test1UpdateOneWithoutTest4NestedInput
  test2: Test2UpdateOneWithoutTest4NestedInput
  test3: Test3UpdateOneRequiredWithoutTest4NestedInput
  test5: Test5UpdateOneWithoutTest4NestedInput
}

input Test4UpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input Test4UpdateManyWithWhereWithoutCreatedByInput {
  data: Test4UpdateManyMutationInput!
  where: Test4ScalarWhereInput!
}

input Test4UpdateManyWithWhereWithoutTest1Input {
  data: Test4UpdateManyMutationInput!
  where: Test4ScalarWhereInput!
}

input Test4UpdateManyWithWhereWithoutTest2Input {
  data: Test4UpdateManyMutationInput!
  where: Test4ScalarWhereInput!
}

input Test4UpdateManyWithWhereWithoutTest3Input {
  data: Test4UpdateManyMutationInput!
  where: Test4ScalarWhereInput!
}

input Test4UpdateManyWithWhereWithoutTest5Input {
  data: Test4UpdateManyMutationInput!
  where: Test4ScalarWhereInput!
}

input Test4UpdateManyWithoutCreatedByNestedInput {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutCreatedByInput!]
  create: [Test4CreateWithoutCreatedByInput!]
  createMany: Test4CreateManyCreatedByInputEnvelope
  delete: [Test4WhereUniqueInput!]
  deleteMany: [Test4ScalarWhereInput!]
  disconnect: [Test4WhereUniqueInput!]
  set: [Test4WhereUniqueInput!]
  update: [Test4UpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [Test4UpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [Test4UpsertWithWhereUniqueWithoutCreatedByInput!]
}

input Test4UpdateManyWithoutTest1NestedInput {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutTest1Input!]
  create: [Test4CreateWithoutTest1Input!]
  createMany: Test4CreateManyTest1InputEnvelope
  delete: [Test4WhereUniqueInput!]
  deleteMany: [Test4ScalarWhereInput!]
  disconnect: [Test4WhereUniqueInput!]
  set: [Test4WhereUniqueInput!]
  update: [Test4UpdateWithWhereUniqueWithoutTest1Input!]
  updateMany: [Test4UpdateManyWithWhereWithoutTest1Input!]
  upsert: [Test4UpsertWithWhereUniqueWithoutTest1Input!]
}

input Test4UpdateManyWithoutTest2NestedInput {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutTest2Input!]
  create: [Test4CreateWithoutTest2Input!]
  createMany: Test4CreateManyTest2InputEnvelope
  delete: [Test4WhereUniqueInput!]
  deleteMany: [Test4ScalarWhereInput!]
  disconnect: [Test4WhereUniqueInput!]
  set: [Test4WhereUniqueInput!]
  update: [Test4UpdateWithWhereUniqueWithoutTest2Input!]
  updateMany: [Test4UpdateManyWithWhereWithoutTest2Input!]
  upsert: [Test4UpsertWithWhereUniqueWithoutTest2Input!]
}

input Test4UpdateManyWithoutTest3NestedInput {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutTest3Input!]
  create: [Test4CreateWithoutTest3Input!]
  createMany: Test4CreateManyTest3InputEnvelope
  delete: [Test4WhereUniqueInput!]
  deleteMany: [Test4ScalarWhereInput!]
  disconnect: [Test4WhereUniqueInput!]
  set: [Test4WhereUniqueInput!]
  update: [Test4UpdateWithWhereUniqueWithoutTest3Input!]
  updateMany: [Test4UpdateManyWithWhereWithoutTest3Input!]
  upsert: [Test4UpsertWithWhereUniqueWithoutTest3Input!]
}

input Test4UpdateManyWithoutTest5NestedInput {
  connect: [Test4WhereUniqueInput!]
  connectOrCreate: [Test4CreateOrConnectWithoutTest5Input!]
  create: [Test4CreateWithoutTest5Input!]
  createMany: Test4CreateManyTest5InputEnvelope
  delete: [Test4WhereUniqueInput!]
  deleteMany: [Test4ScalarWhereInput!]
  disconnect: [Test4WhereUniqueInput!]
  set: [Test4WhereUniqueInput!]
  update: [Test4UpdateWithWhereUniqueWithoutTest5Input!]
  updateMany: [Test4UpdateManyWithWhereWithoutTest5Input!]
  upsert: [Test4UpsertWithWhereUniqueWithoutTest5Input!]
}

input Test4UpdateWithWhereUniqueWithoutCreatedByInput {
  data: Test4UpdateWithoutCreatedByInput!
  where: Test4WhereUniqueInput!
}

input Test4UpdateWithWhereUniqueWithoutTest1Input {
  data: Test4UpdateWithoutTest1Input!
  where: Test4WhereUniqueInput!
}

input Test4UpdateWithWhereUniqueWithoutTest2Input {
  data: Test4UpdateWithoutTest2Input!
  where: Test4WhereUniqueInput!
}

input Test4UpdateWithWhereUniqueWithoutTest3Input {
  data: Test4UpdateWithoutTest3Input!
  where: Test4WhereUniqueInput!
}

input Test4UpdateWithWhereUniqueWithoutTest5Input {
  data: Test4UpdateWithoutTest5Input!
  where: Test4WhereUniqueInput!
}

input Test4UpdateWithoutCreatedByInput {
  name: StringFieldUpdateOperationsInput
  test1: Test1UpdateOneWithoutTest4NestedInput
  test2: Test2UpdateOneWithoutTest4NestedInput
  test3: Test3UpdateOneRequiredWithoutTest4NestedInput
  test5: Test5UpdateOneWithoutTest4NestedInput
}

input Test4UpdateWithoutTest1Input {
  createdBy: UserUpdateOneWithoutTest4NestedInput
  name: StringFieldUpdateOperationsInput
  test2: Test2UpdateOneWithoutTest4NestedInput
  test3: Test3UpdateOneRequiredWithoutTest4NestedInput
  test5: Test5UpdateOneWithoutTest4NestedInput
}

input Test4UpdateWithoutTest2Input {
  createdBy: UserUpdateOneWithoutTest4NestedInput
  name: StringFieldUpdateOperationsInput
  test1: Test1UpdateOneWithoutTest4NestedInput
  test3: Test3UpdateOneRequiredWithoutTest4NestedInput
  test5: Test5UpdateOneWithoutTest4NestedInput
}

input Test4UpdateWithoutTest3Input {
  createdBy: UserUpdateOneWithoutTest4NestedInput
  name: StringFieldUpdateOperationsInput
  test1: Test1UpdateOneWithoutTest4NestedInput
  test2: Test2UpdateOneWithoutTest4NestedInput
  test5: Test5UpdateOneWithoutTest4NestedInput
}

input Test4UpdateWithoutTest5Input {
  createdBy: UserUpdateOneWithoutTest4NestedInput
  name: StringFieldUpdateOperationsInput
  test1: Test1UpdateOneWithoutTest4NestedInput
  test2: Test2UpdateOneWithoutTest4NestedInput
  test3: Test3UpdateOneRequiredWithoutTest4NestedInput
}

input Test4UpsertWithWhereUniqueWithoutCreatedByInput {
  create: Test4CreateWithoutCreatedByInput!
  update: Test4UpdateWithoutCreatedByInput!
  where: Test4WhereUniqueInput!
}

input Test4UpsertWithWhereUniqueWithoutTest1Input {
  create: Test4CreateWithoutTest1Input!
  update: Test4UpdateWithoutTest1Input!
  where: Test4WhereUniqueInput!
}

input Test4UpsertWithWhereUniqueWithoutTest2Input {
  create: Test4CreateWithoutTest2Input!
  update: Test4UpdateWithoutTest2Input!
  where: Test4WhereUniqueInput!
}

input Test4UpsertWithWhereUniqueWithoutTest3Input {
  create: Test4CreateWithoutTest3Input!
  update: Test4UpdateWithoutTest3Input!
  where: Test4WhereUniqueInput!
}

input Test4UpsertWithWhereUniqueWithoutTest5Input {
  create: Test4CreateWithoutTest5Input!
  update: Test4UpdateWithoutTest5Input!
  where: Test4WhereUniqueInput!
}

input Test4WhereInput {
  AND: [Test4WhereInput!]
  NOT: [Test4WhereInput!]
  OR: [Test4WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
  test1: Test1NullableRelationFilter
  test1Id: StringNullableFilter
  test2: Test2NullableRelationFilter
  test2Id: StringFilter
  test3: Test3RelationFilter
  test3Id: StringFilter
  test5: Test5NullableRelationFilter
  test5Id: StringNullableFilter
}

input Test4WhereUniqueInput {
  AND: [Test4WhereInput!]
  NOT: [Test4WhereInput!]
  OR: [Test4WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: String
  name: StringFilter
  test1: Test1NullableRelationFilter
  test1Id: StringNullableFilter
  test2: Test2NullableRelationFilter
  test2Id: StringFilter
  test3: Test3RelationFilter
  test3Id: StringFilter
  test5: Test5NullableRelationFilter
  test5Id: StringNullableFilter
}

type Test5 {
  _count: Test5Count
  createdBy(where: UserWhereInput): User
  createdById: String
  id: String!
  name: String!
  test3(cursor: Test3WhereUniqueInput, distinct: [Test3ScalarFieldEnum!], orderBy: [Test3OrderByWithRelationInput!], skip: Int, take: Int, where: Test3WhereInput): [Test3!]!
  test4(cursor: Test4WhereUniqueInput, distinct: [Test4ScalarFieldEnum!], orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): [Test4!]!
}

type Test5Count {
  test3(where: Test3WhereInput): Int!
  test4(where: Test4WhereInput): Int!
}

type Test5CountAggregate {
  _all: Int!
  createdById: Int!
  id: Int!
  name: Int!
}

input Test5CountOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test5CreateInput {
  createdBy: UserCreateNestedOneWithoutTest5Input
  id: String
  name: String!
  test3: Test3CreateNestedManyWithoutTest5Input
  test4: Test4CreateNestedManyWithoutTest5Input
}

input Test5CreateManyCreatedByInput {
  id: String
  name: String!
}

input Test5CreateManyCreatedByInputEnvelope {
  data: [Test5CreateManyCreatedByInput!]!
}

input Test5CreateManyInput {
  createdById: String
  id: String
  name: String!
}

input Test5CreateNestedManyWithoutCreatedByInput {
  connect: [Test5WhereUniqueInput!]
  connectOrCreate: [Test5CreateOrConnectWithoutCreatedByInput!]
  create: [Test5CreateWithoutCreatedByInput!]
  createMany: Test5CreateManyCreatedByInputEnvelope
}

input Test5CreateNestedOneWithoutTest3Input {
  connect: Test5WhereUniqueInput
  connectOrCreate: Test5CreateOrConnectWithoutTest3Input
  create: Test5CreateWithoutTest3Input
}

input Test5CreateNestedOneWithoutTest4Input {
  connect: Test5WhereUniqueInput
  connectOrCreate: Test5CreateOrConnectWithoutTest4Input
  create: Test5CreateWithoutTest4Input
}

input Test5CreateOrConnectWithoutCreatedByInput {
  create: Test5CreateWithoutCreatedByInput!
  where: Test5WhereUniqueInput!
}

input Test5CreateOrConnectWithoutTest3Input {
  create: Test5CreateWithoutTest3Input!
  where: Test5WhereUniqueInput!
}

input Test5CreateOrConnectWithoutTest4Input {
  create: Test5CreateWithoutTest4Input!
  where: Test5WhereUniqueInput!
}

input Test5CreateWithoutCreatedByInput {
  id: String
  name: String!
  test3: Test3CreateNestedManyWithoutTest5Input
  test4: Test4CreateNestedManyWithoutTest5Input
}

input Test5CreateWithoutTest3Input {
  createdBy: UserCreateNestedOneWithoutTest5Input
  id: String
  name: String!
  test4: Test4CreateNestedManyWithoutTest5Input
}

input Test5CreateWithoutTest4Input {
  createdBy: UserCreateNestedOneWithoutTest5Input
  id: String
  name: String!
  test3: Test3CreateNestedManyWithoutTest5Input
}

type Test5GroupBy {
  _count: Test5CountAggregate
  _max: Test5MaxAggregate
  _min: Test5MinAggregate
  createdById: String
  id: String!
  name: String!
}

input Test5ListRelationFilter {
  every: Test5WhereInput
  none: Test5WhereInput
  some: Test5WhereInput
}

type Test5MaxAggregate {
  createdById: String
  id: String
  name: String
}

input Test5MaxOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

type Test5MinAggregate {
  createdById: String
  id: String
  name: String
}

input Test5MinOrderByAggregateInput {
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test5NullableRelationFilter {
  is: Test5WhereInput
  isNot: Test5WhereInput
}

input Test5OrderByRelationAggregateInput {
  _count: SortOrder
}

input Test5OrderByWithAggregationInput {
  _count: Test5CountOrderByAggregateInput
  _max: Test5MaxOrderByAggregateInput
  _min: Test5MinOrderByAggregateInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
}

input Test5OrderByWithRelationInput {
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  id: SortOrder
  name: SortOrder
  test3: Test3OrderByRelationAggregateInput
  test4: Test4OrderByRelationAggregateInput
}

input Test5RelationFilter {
  is: Test5WhereInput
  isNot: Test5WhereInput
}

enum Test5ScalarFieldEnum {
  createdById
  id
  name
}

input Test5ScalarWhereInput {
  AND: [Test5ScalarWhereInput!]
  NOT: [Test5ScalarWhereInput!]
  OR: [Test5ScalarWhereInput!]
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
}

input Test5ScalarWhereWithAggregatesInput {
  AND: [Test5ScalarWhereWithAggregatesInput!]
  NOT: [Test5ScalarWhereWithAggregatesInput!]
  OR: [Test5ScalarWhereWithAggregatesInput!]
  createdById: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input Test5UpdateInput {
  createdBy: UserUpdateOneWithoutTest5NestedInput
  name: StringFieldUpdateOperationsInput
  test3: Test3UpdateManyWithoutTest5NestedInput
  test4: Test4UpdateManyWithoutTest5NestedInput
}

input Test5UpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input Test5UpdateManyWithWhereWithoutCreatedByInput {
  data: Test5UpdateManyMutationInput!
  where: Test5ScalarWhereInput!
}

input Test5UpdateManyWithoutCreatedByNestedInput {
  connect: [Test5WhereUniqueInput!]
  connectOrCreate: [Test5CreateOrConnectWithoutCreatedByInput!]
  create: [Test5CreateWithoutCreatedByInput!]
  createMany: Test5CreateManyCreatedByInputEnvelope
  delete: [Test5WhereUniqueInput!]
  deleteMany: [Test5ScalarWhereInput!]
  disconnect: [Test5WhereUniqueInput!]
  set: [Test5WhereUniqueInput!]
  update: [Test5UpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [Test5UpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [Test5UpsertWithWhereUniqueWithoutCreatedByInput!]
}

input Test5UpdateOneRequiredWithoutTest3NestedInput {
  connect: Test5WhereUniqueInput
  connectOrCreate: Test5CreateOrConnectWithoutTest3Input
  create: Test5CreateWithoutTest3Input
  update: Test5UpdateToOneWithWhereWithoutTest3Input
  upsert: Test5UpsertWithoutTest3Input
}

input Test5UpdateOneWithoutTest4NestedInput {
  connect: Test5WhereUniqueInput
  connectOrCreate: Test5CreateOrConnectWithoutTest4Input
  create: Test5CreateWithoutTest4Input
  delete: Test5WhereInput
  disconnect: Boolean
  update: Test5UpdateToOneWithWhereWithoutTest4Input
  upsert: Test5UpsertWithoutTest4Input
}

input Test5UpdateToOneWithWhereWithoutTest3Input {
  data: Test5UpdateWithoutTest3Input!
  where: Test5WhereInput
}

input Test5UpdateToOneWithWhereWithoutTest4Input {
  data: Test5UpdateWithoutTest4Input!
  where: Test5WhereInput
}

input Test5UpdateWithWhereUniqueWithoutCreatedByInput {
  data: Test5UpdateWithoutCreatedByInput!
  where: Test5WhereUniqueInput!
}

input Test5UpdateWithoutCreatedByInput {
  name: StringFieldUpdateOperationsInput
  test3: Test3UpdateManyWithoutTest5NestedInput
  test4: Test4UpdateManyWithoutTest5NestedInput
}

input Test5UpdateWithoutTest3Input {
  createdBy: UserUpdateOneWithoutTest5NestedInput
  name: StringFieldUpdateOperationsInput
  test4: Test4UpdateManyWithoutTest5NestedInput
}

input Test5UpdateWithoutTest4Input {
  createdBy: UserUpdateOneWithoutTest5NestedInput
  name: StringFieldUpdateOperationsInput
  test3: Test3UpdateManyWithoutTest5NestedInput
}

input Test5UpsertWithWhereUniqueWithoutCreatedByInput {
  create: Test5CreateWithoutCreatedByInput!
  update: Test5UpdateWithoutCreatedByInput!
  where: Test5WhereUniqueInput!
}

input Test5UpsertWithoutTest3Input {
  create: Test5CreateWithoutTest3Input!
  update: Test5UpdateWithoutTest3Input!
  where: Test5WhereInput
}

input Test5UpsertWithoutTest4Input {
  create: Test5CreateWithoutTest4Input!
  update: Test5UpdateWithoutTest4Input!
  where: Test5WhereInput
}

input Test5WhereInput {
  AND: [Test5WhereInput!]
  NOT: [Test5WhereInput!]
  OR: [Test5WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: StringFilter
  name: StringFilter
  test3: Test3ListRelationFilter
  test4: Test4ListRelationFilter
}

input Test5WhereUniqueInput {
  AND: [Test5WhereInput!]
  NOT: [Test5WhereInput!]
  OR: [Test5WhereInput!]
  createdBy: UserNullableRelationFilter
  createdById: StringNullableFilter
  id: String
  name: StringFilter
  test3: Test3ListRelationFilter
  test4: Test4ListRelationFilter
}

type User {
  _count: UserCount
  id: String!
  name: String
  test1(cursor: Test1WhereUniqueInput, distinct: [Test1ScalarFieldEnum!], orderBy: [Test1OrderByWithRelationInput!], skip: Int, take: Int, where: Test1WhereInput): [Test1!]!
  test2(cursor: Test2WhereUniqueInput, distinct: [Test2ScalarFieldEnum!], orderBy: [Test2OrderByWithRelationInput!], skip: Int, take: Int, where: Test2WhereInput): [Test2!]!
  test3(cursor: Test3WhereUniqueInput, distinct: [Test3ScalarFieldEnum!], orderBy: [Test3OrderByWithRelationInput!], skip: Int, take: Int, where: Test3WhereInput): [Test3!]!
  test4(cursor: Test4WhereUniqueInput, distinct: [Test4ScalarFieldEnum!], orderBy: [Test4OrderByWithRelationInput!], skip: Int, take: Int, where: Test4WhereInput): [Test4!]!
  test5(cursor: Test5WhereUniqueInput, distinct: [Test5ScalarFieldEnum!], orderBy: [Test5OrderByWithRelationInput!], skip: Int, take: Int, where: Test5WhereInput): [Test5!]!
}

type UserCount {
  test1(where: Test1WhereInput): Int!
  test2(where: Test2WhereInput): Int!
  test3(where: Test3WhereInput): Int!
  test4(where: Test4WhereInput): Int!
  test5(where: Test5WhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input UserCreateInput {
  id: String
  name: String
  test1: Test1CreateNestedManyWithoutCreatedByInput
  test2: Test2CreateNestedManyWithoutCreatedByInput
  test3: Test3CreateNestedManyWithoutCreatedByInput
  test4: Test4CreateNestedManyWithoutCreatedByInput
  test5: Test5CreateNestedManyWithoutCreatedByInput
}

input UserCreateManyInput {
  id: String
  name: String
}

input UserCreateNestedOneWithoutTest1Input {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest1Input
  create: UserCreateWithoutTest1Input
}

input UserCreateNestedOneWithoutTest2Input {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest2Input
  create: UserCreateWithoutTest2Input
}

input UserCreateNestedOneWithoutTest3Input {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest3Input
  create: UserCreateWithoutTest3Input
}

input UserCreateNestedOneWithoutTest4Input {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest4Input
  create: UserCreateWithoutTest4Input
}

input UserCreateNestedOneWithoutTest5Input {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest5Input
  create: UserCreateWithoutTest5Input
}

input UserCreateOrConnectWithoutTest1Input {
  create: UserCreateWithoutTest1Input!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTest2Input {
  create: UserCreateWithoutTest2Input!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTest3Input {
  create: UserCreateWithoutTest3Input!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTest4Input {
  create: UserCreateWithoutTest4Input!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTest5Input {
  create: UserCreateWithoutTest5Input!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutTest1Input {
  id: String
  name: String
  test2: Test2CreateNestedManyWithoutCreatedByInput
  test3: Test3CreateNestedManyWithoutCreatedByInput
  test4: Test4CreateNestedManyWithoutCreatedByInput
  test5: Test5CreateNestedManyWithoutCreatedByInput
}

input UserCreateWithoutTest2Input {
  id: String
  name: String
  test1: Test1CreateNestedManyWithoutCreatedByInput
  test3: Test3CreateNestedManyWithoutCreatedByInput
  test4: Test4CreateNestedManyWithoutCreatedByInput
  test5: Test5CreateNestedManyWithoutCreatedByInput
}

input UserCreateWithoutTest3Input {
  id: String
  name: String
  test1: Test1CreateNestedManyWithoutCreatedByInput
  test2: Test2CreateNestedManyWithoutCreatedByInput
  test4: Test4CreateNestedManyWithoutCreatedByInput
  test5: Test5CreateNestedManyWithoutCreatedByInput
}

input UserCreateWithoutTest4Input {
  id: String
  name: String
  test1: Test1CreateNestedManyWithoutCreatedByInput
  test2: Test2CreateNestedManyWithoutCreatedByInput
  test3: Test3CreateNestedManyWithoutCreatedByInput
  test5: Test5CreateNestedManyWithoutCreatedByInput
}

input UserCreateWithoutTest5Input {
  id: String
  name: String
  test1: Test1CreateNestedManyWithoutCreatedByInput
  test2: Test2CreateNestedManyWithoutCreatedByInput
  test3: Test3CreateNestedManyWithoutCreatedByInput
  test4: Test4CreateNestedManyWithoutCreatedByInput
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  id: String!
  name: String
}

type UserMaxAggregate {
  id: String
  name: String
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  id: String
  name: String
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  test1: Test1OrderByRelationAggregateInput
  test2: Test2OrderByRelationAggregateInput
  test3: Test3OrderByRelationAggregateInput
  test4: Test4OrderByRelationAggregateInput
  test5: Test5OrderByRelationAggregateInput
}

enum UserScalarFieldEnum {
  id
  name
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
}

input UserUpdateInput {
  name: NullableStringFieldUpdateOperationsInput
  test1: Test1UpdateManyWithoutCreatedByNestedInput
  test2: Test2UpdateManyWithoutCreatedByNestedInput
  test3: Test3UpdateManyWithoutCreatedByNestedInput
  test4: Test4UpdateManyWithoutCreatedByNestedInput
  test5: Test5UpdateManyWithoutCreatedByNestedInput
}

input UserUpdateManyMutationInput {
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneWithoutTest1NestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest1Input
  create: UserCreateWithoutTest1Input
  delete: UserWhereInput
  disconnect: Boolean
  update: UserUpdateToOneWithWhereWithoutTest1Input
  upsert: UserUpsertWithoutTest1Input
}

input UserUpdateOneWithoutTest2NestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest2Input
  create: UserCreateWithoutTest2Input
  delete: UserWhereInput
  disconnect: Boolean
  update: UserUpdateToOneWithWhereWithoutTest2Input
  upsert: UserUpsertWithoutTest2Input
}

input UserUpdateOneWithoutTest3NestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest3Input
  create: UserCreateWithoutTest3Input
  delete: UserWhereInput
  disconnect: Boolean
  update: UserUpdateToOneWithWhereWithoutTest3Input
  upsert: UserUpsertWithoutTest3Input
}

input UserUpdateOneWithoutTest4NestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest4Input
  create: UserCreateWithoutTest4Input
  delete: UserWhereInput
  disconnect: Boolean
  update: UserUpdateToOneWithWhereWithoutTest4Input
  upsert: UserUpsertWithoutTest4Input
}

input UserUpdateOneWithoutTest5NestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTest5Input
  create: UserCreateWithoutTest5Input
  delete: UserWhereInput
  disconnect: Boolean
  update: UserUpdateToOneWithWhereWithoutTest5Input
  upsert: UserUpsertWithoutTest5Input
}

input UserUpdateToOneWithWhereWithoutTest1Input {
  data: UserUpdateWithoutTest1Input!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutTest2Input {
  data: UserUpdateWithoutTest2Input!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutTest3Input {
  data: UserUpdateWithoutTest3Input!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutTest4Input {
  data: UserUpdateWithoutTest4Input!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutTest5Input {
  data: UserUpdateWithoutTest5Input!
  where: UserWhereInput
}

input UserUpdateWithoutTest1Input {
  name: NullableStringFieldUpdateOperationsInput
  test2: Test2UpdateManyWithoutCreatedByNestedInput
  test3: Test3UpdateManyWithoutCreatedByNestedInput
  test4: Test4UpdateManyWithoutCreatedByNestedInput
  test5: Test5UpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutTest2Input {
  name: NullableStringFieldUpdateOperationsInput
  test1: Test1UpdateManyWithoutCreatedByNestedInput
  test3: Test3UpdateManyWithoutCreatedByNestedInput
  test4: Test4UpdateManyWithoutCreatedByNestedInput
  test5: Test5UpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutTest3Input {
  name: NullableStringFieldUpdateOperationsInput
  test1: Test1UpdateManyWithoutCreatedByNestedInput
  test2: Test2UpdateManyWithoutCreatedByNestedInput
  test4: Test4UpdateManyWithoutCreatedByNestedInput
  test5: Test5UpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutTest4Input {
  name: NullableStringFieldUpdateOperationsInput
  test1: Test1UpdateManyWithoutCreatedByNestedInput
  test2: Test2UpdateManyWithoutCreatedByNestedInput
  test3: Test3UpdateManyWithoutCreatedByNestedInput
  test5: Test5UpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutTest5Input {
  name: NullableStringFieldUpdateOperationsInput
  test1: Test1UpdateManyWithoutCreatedByNestedInput
  test2: Test2UpdateManyWithoutCreatedByNestedInput
  test3: Test3UpdateManyWithoutCreatedByNestedInput
  test4: Test4UpdateManyWithoutCreatedByNestedInput
}

input UserUpsertWithoutTest1Input {
  create: UserCreateWithoutTest1Input!
  update: UserUpdateWithoutTest1Input!
  where: UserWhereInput
}

input UserUpsertWithoutTest2Input {
  create: UserCreateWithoutTest2Input!
  update: UserUpdateWithoutTest2Input!
  where: UserWhereInput
}

input UserUpsertWithoutTest3Input {
  create: UserCreateWithoutTest3Input!
  update: UserUpdateWithoutTest3Input!
  where: UserWhereInput
}

input UserUpsertWithoutTest4Input {
  create: UserCreateWithoutTest4Input!
  update: UserUpdateWithoutTest4Input!
  where: UserWhereInput
}

input UserUpsertWithoutTest5Input {
  create: UserCreateWithoutTest5Input!
  update: UserUpdateWithoutTest5Input!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: StringFilter
  name: StringNullableFilter
  test1: Test1ListRelationFilter
  test2: Test2ListRelationFilter
  test3: Test3ListRelationFilter
  test4: Test4ListRelationFilter
  test5: Test5ListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: String
  name: StringNullableFilter
  test1: Test1ListRelationFilter
  test2: Test2ListRelationFilter
  test3: Test3ListRelationFilter
  test4: Test4ListRelationFilter
  test5: Test5ListRelationFilter
}